AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  S3Bucket:
    Type: String
    Description: S3 bucket where the Lambda deployment package is stored

Resources:
  SummarizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/ArxivSummarizer/OpenAIKey*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                - !Sub arn:aws:s3:::${S3Bucket}
                - !Sub arn:aws:s3:::${S3Bucket}/*

  SummarizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler  # Updated handler
      Runtime: python3.9
      Role: !GetAtt SummarizerLambdaRole.Arn
      Timeout: 180
      MemorySize: 512
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda.zip
      Environment:
        Variables:
          SECRET_NAME: prod/ArxivSummarizer/OpenAIKey
          S3_BUCKET: !Ref S3Bucket

  RequestorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: requestor_lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt SummarizerLambdaRole.Arn
      Timeout: 120
      MemorySize: 1024
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambda.zip
      Environment:
        Variables:
          LAMBDA_ARN: !GetAtt SummarizerLambda.Arn
          S3_BUCKET: !Ref S3Bucket

  SummarizerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ArxivSummarizerAPI

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SummarizerApi
      ParentId: !GetAtt SummarizerApi.RootResourceId
      PathPart: summarize

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SummarizerApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt RequestorLambda.Arn
        TimeoutInMillis: 29000
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SummarizerApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: Empty

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref SummarizerApi

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref SummarizerApi
      DeploymentId: !Ref ApiDeployment
      StageName: prod

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: ArxivSummarizerUsagePlan
      Throttle:
        BurstLimit: 5  # Maximum allowed requests in a short burst
        RateLimit: 0.4  # 5 requests per day (5 / 86400 seconds)
      Quota:
        Limit: 200  # Total requests allowed per day
        Period: DAY
      ApiStages:
        - ApiId: !Ref SummarizerApi
          Stage: !Ref ApiStage

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: ArxivSummarizerApiKey
      Enabled: true
      StageKeys:
        - RestApiId: !Ref SummarizerApi
          StageName: !Ref ApiStage

  ApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RequestorLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SummarizerApi}/*/POST/summarize

# Outputs:
#   ApiGatewayId:
#     Description: "API Gateway ID"
#     Value: !Ref SummarizerApi